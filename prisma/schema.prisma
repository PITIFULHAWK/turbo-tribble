// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum TripStatus {
  REQUESTED
  ACCEPTED
  COMPLETED
  CANCELLED
}

model User {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  phone          String  @unique
  name           String
  profilePicture String
  email          String?
  currentLat     Float?
  currentLng     Float?

  // Relations: A user can be a rider and/or driver in many trips.
  tripsAsRider  Trip[] @relation("RiderTrips")
  tripsAsDriver Trip[] @relation("DriverTrips")

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OTP {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  phone     String // The phone number for which this OTP is issued.
  code      String // The OTP code.
  createdAt DateTime @default(now())
  expiresAt DateTime // When this OTP should no longer be considered valid.
}

model Trip {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  rider   User   @relation("RiderTrips", fields: [riderId], references: [id])
  riderId String @db.ObjectId

  driver   User?   @relation("DriverTrips", fields: [driverId], references: [id])
  driverId String? @db.ObjectId

  startLat Float
  startLng Float
  endLat   Float?
  endLng   Float?

  requestedAt DateTime  @default(now())
  acceptedAt  DateTime?
  completedAt DateTime?

  status TripStatus

  chat Chat?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ... existing fields ...
  @@index([status])
  @@index([riderId])
  @@index([driverId])
}

model Chat {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  trip     Trip      @relation(fields: [tripId], references: [id])
  tripId   String    @unique @db.ObjectId
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String @db.ObjectId

  sender   User   @relation(fields: [senderId], references: [id])
  senderId String @db.ObjectId
  text     String

  createdAt DateTime @default(now())
}
